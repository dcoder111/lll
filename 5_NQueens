import java.util.Scanner;

public class NQueens {
    private int[][] board;
    private int n;

    public NQueens(int n) {
        this.n = n;
        board = new int[n][n];
    }

    private boolean isSafe(int row, int col) {
        for (int i = 0; i < col; i++)
            if (board[row][i] == 1)
                return false;

        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 1)
                return false;

        for (int i = row, j = col; j >= 0 && i < n; i++, j--)
            if (board[i][j] == 1)
                return false;

        return true;
    }

    private boolean solveNQueens(int col) {
        if (col >= n)
            return true;

        for (int i = 0; i < n; i++) {
            if (isSafe(i, col)) {
                board[i][col] = 1;

                if (solveNQueens(col + 1))
                    return true;

                board[i][col] = 0; // backtrack
            }
        }
        return false;
    }

    public void solve() {
        if (solveNQueens(0)) {
            printBoard();
        } else {
            System.out.println("No solution exists for " + n + " queens.");
        }
    }

    private void printBoard() {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(board[i][j] == 1 ? "Q " : ". ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of queens: ");
        int n = scanner.nextInt();
        scanner.close();

        NQueens nQueens = new NQueens(n);
        nQueens.solve();
    }
}


// Time Complexity (TC): O(N!) (due to exploring factorial placements with backtracking).
// Space Complexity (SC): O(n^2)

// OUTPUT :
// Enter the number of queens: 8
// Q . . . . . . .
// . . . . . . Q .
// . . . . Q . . .
// . . . . . . . Q
// . Q . . . . . .
// . . . Q . . . .
// . . . . . Q . .
// . . Q . . . . .
